import { type Account, type Address, type Chain, type Client, type ClientConfig, type ParseAccount, type Transport, type WalletActions, type WalletRpcSchema } from 'viem';
import type { ChainWithEns } from '../contracts/consts.js';
import type { Prettify } from '../types.js';
import { type EnsWalletActions } from './decorators/wallet.js';
export type EnsWalletClientConfig<TTransport extends Transport, TChain extends Chain, TAccountOrAddress extends Account | Address | undefined = Account | Address | undefined> = Pick<ClientConfig<TTransport, TChain, TAccountOrAddress>, 'account' | 'chain' | 'key' | 'name' | 'pollingInterval' | 'transport'> & {
    chain: TChain;
};
export type EnsWalletClient<TTransport extends Transport = Transport, TChain extends ChainWithEns = ChainWithEns, TAccount extends Account | undefined = Account | undefined> = Prettify<Client<TTransport, TChain, TAccount, WalletRpcSchema, WalletActions<TChain, TAccount> & EnsWalletActions<TChain, TAccount>>>;
/**
 * Creates an ENS Wallet Client with a given [Transport](https://viem.sh/docs/clients/intro.html) configured for a [Chain](https://viem.sh/docs/clients/chains.html).
 *
 * @param config - {@link EnsWalletClientConfig}
 * @returns An ENS Wallet Client. {@link EnsWalletClient}
 *
 * @example
 * import { custom } from 'viem'
 * import { mainnet } from 'viem/chains'
 * import { createEnsWalletClient } from '@ensdomains/ensjs'
 *
 * const client = createEnsWalletClient({
 *   chain: mainnet,
 *   transport: custom(window.ethereum),
 * })
 */
export declare const createEnsWalletClient: <TTransport extends Transport, TChain extends Chain, TAccountOrAddress extends `0x${string}` | Account | undefined = undefined>({ account, chain, key, name, transport, pollingInterval, }: EnsWalletClientConfig<TTransport, TChain, TAccountOrAddress>) => {
    account: ParseAccount<TAccountOrAddress>;
    batch?: {
        multicall?: boolean | {
            batchSize?: number | undefined;
            wait?: number | undefined;
        } | undefined;
    } | undefined;
    cacheTime: number;
    chain: ChainWithEns<TChain>;
    key: string;
    name: string;
    pollingInterval: number;
    request: import("viem").EIP1193RequestFn<WalletRpcSchema>;
    transport: ReturnType<TTransport>["config"] & ReturnType<TTransport>["value"];
    type: string;
    uid: string;
    addChain: (args: import("viem").AddChainParameters) => Promise<void>;
    deployContract: <const TAbi extends import("viem").Abi | readonly unknown[], TChainOverride extends Chain | undefined>(args: import("viem").DeployContractParameters<TAbi, ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, TChainOverride>) => Promise<`0x${string}`>;
    getAddresses: () => Promise<import("viem").GetAddressesReturnType>;
    getChainId: () => Promise<number>;
    getPermissions: () => Promise<import("viem").GetPermissionsReturnType>;
    prepareTransactionRequest: <TChainOverride_1 extends Chain | undefined>(args: import("viem").PrepareTransactionRequestParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, TChainOverride_1>) => Promise<import("viem").PrepareTransactionRequestReturnType>;
    requestAddresses: () => Promise<import("viem").RequestAddressesReturnType>;
    requestPermissions: (args: {
        [x: string]: Record<string, any>;
        eth_accounts: Record<string, any>;
    }) => Promise<import("viem").RequestPermissionsReturnType>;
    sendRawTransaction: (args: import("viem/actions").SendRawTransactionParameters) => Promise<`0x${string}`>;
    sendTransaction: <TChainOverride_2 extends Chain | undefined>(args: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, TChainOverride_2>) => Promise<`0x${string}`>;
    signMessage: (args: import("viem").SignMessageParameters<ParseAccount<TAccountOrAddress>>) => Promise<`0x${string}`>;
    signTransaction: <TChainOverride_3 extends Chain | undefined>(args: import("viem/actions").SignTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, TChainOverride_3>) => Promise<`0x${string}`>;
    signTypedData: <const TTypedData extends {
        [key: string]: unknown;
    } | {
        [x: string]: readonly import("viem").TypedDataParameter[];
        [x: `string[${string}]`]: undefined;
        [x: `function[${string}]`]: undefined;
        [x: `address[${string}]`]: undefined;
        [x: `bool[${string}]`]: undefined;
        [x: `bytes[${string}]`]: undefined;
        [x: `bytes3[${string}]`]: undefined;
        [x: `bytes10[${string}]`]: undefined;
        [x: `bytes16[${string}]`]: undefined;
        [x: `bytes1[${string}]`]: undefined;
        [x: `bytes2[${string}]`]: undefined;
        [x: `bytes4[${string}]`]: undefined;
        [x: `bytes5[${string}]`]: undefined;
        [x: `bytes6[${string}]`]: undefined;
        [x: `bytes7[${string}]`]: undefined;
        [x: `bytes8[${string}]`]: undefined;
        [x: `bytes9[${string}]`]: undefined;
        [x: `bytes11[${string}]`]: undefined;
        [x: `bytes12[${string}]`]: undefined;
        [x: `bytes13[${string}]`]: undefined;
        [x: `bytes14[${string}]`]: undefined;
        [x: `bytes15[${string}]`]: undefined;
        [x: `bytes17[${string}]`]: undefined;
        [x: `bytes18[${string}]`]: undefined;
        [x: `bytes19[${string}]`]: undefined;
        [x: `bytes20[${string}]`]: undefined;
        [x: `bytes21[${string}]`]: undefined;
        [x: `bytes22[${string}]`]: undefined;
        [x: `bytes23[${string}]`]: undefined;
        [x: `bytes24[${string}]`]: undefined;
        [x: `bytes25[${string}]`]: undefined;
        [x: `bytes26[${string}]`]: undefined;
        [x: `bytes27[${string}]`]: undefined;
        [x: `bytes28[${string}]`]: undefined;
        [x: `bytes29[${string}]`]: undefined;
        [x: `bytes30[${string}]`]: undefined;
        [x: `bytes31[${string}]`]: undefined;
        [x: `bytes32[${string}]`]: undefined;
        [x: `int[${string}]`]: undefined;
        [x: `int16[${string}]`]: undefined;
        [x: `int8[${string}]`]: undefined;
        [x: `int24[${string}]`]: undefined;
        [x: `int32[${string}]`]: undefined;
        [x: `int40[${string}]`]: undefined;
        [x: `int48[${string}]`]: undefined;
        [x: `int56[${string}]`]: undefined;
        [x: `int64[${string}]`]: undefined;
        [x: `int72[${string}]`]: undefined;
        [x: `int80[${string}]`]: undefined;
        [x: `int88[${string}]`]: undefined;
        [x: `int96[${string}]`]: undefined;
        [x: `int104[${string}]`]: undefined;
        [x: `int112[${string}]`]: undefined;
        [x: `int120[${string}]`]: undefined;
        [x: `int128[${string}]`]: undefined;
        [x: `int136[${string}]`]: undefined;
        [x: `int144[${string}]`]: undefined;
        [x: `int152[${string}]`]: undefined;
        [x: `int160[${string}]`]: undefined;
        [x: `int168[${string}]`]: undefined;
        [x: `int176[${string}]`]: undefined;
        [x: `int184[${string}]`]: undefined;
        [x: `int192[${string}]`]: undefined;
        [x: `int200[${string}]`]: undefined;
        [x: `int208[${string}]`]: undefined;
        [x: `int216[${string}]`]: undefined;
        [x: `int224[${string}]`]: undefined;
        [x: `int232[${string}]`]: undefined;
        [x: `int240[${string}]`]: undefined;
        [x: `int248[${string}]`]: undefined;
        [x: `int256[${string}]`]: undefined;
        [x: `uint[${string}]`]: undefined;
        [x: `uint16[${string}]`]: undefined;
        [x: `uint8[${string}]`]: undefined;
        [x: `uint24[${string}]`]: undefined;
        [x: `uint32[${string}]`]: undefined;
        [x: `uint40[${string}]`]: undefined;
        [x: `uint48[${string}]`]: undefined;
        [x: `uint56[${string}]`]: undefined;
        [x: `uint64[${string}]`]: undefined;
        [x: `uint72[${string}]`]: undefined;
        [x: `uint80[${string}]`]: undefined;
        [x: `uint88[${string}]`]: undefined;
        [x: `uint96[${string}]`]: undefined;
        [x: `uint104[${string}]`]: undefined;
        [x: `uint112[${string}]`]: undefined;
        [x: `uint120[${string}]`]: undefined;
        [x: `uint128[${string}]`]: undefined;
        [x: `uint136[${string}]`]: undefined;
        [x: `uint144[${string}]`]: undefined;
        [x: `uint152[${string}]`]: undefined;
        [x: `uint160[${string}]`]: undefined;
        [x: `uint168[${string}]`]: undefined;
        [x: `uint176[${string}]`]: undefined;
        [x: `uint184[${string}]`]: undefined;
        [x: `uint192[${string}]`]: undefined;
        [x: `uint200[${string}]`]: undefined;
        [x: `uint208[${string}]`]: undefined;
        [x: `uint216[${string}]`]: undefined;
        [x: `uint224[${string}]`]: undefined;
        [x: `uint232[${string}]`]: undefined;
        [x: `uint240[${string}]`]: undefined;
        [x: `uint248[${string}]`]: undefined;
        [x: `uint256[${string}]`]: undefined;
        string?: undefined;
        address?: undefined;
        bool?: undefined;
        bytes?: undefined;
        bytes3?: undefined;
        bytes10?: undefined;
        bytes16?: undefined;
        bytes1?: undefined;
        bytes2?: undefined;
        bytes4?: undefined;
        bytes5?: undefined;
        bytes6?: undefined;
        bytes7?: undefined;
        bytes8?: undefined;
        bytes9?: undefined;
        bytes11?: undefined;
        bytes12?: undefined;
        bytes13?: undefined;
        bytes14?: undefined;
        bytes15?: undefined;
        bytes17?: undefined;
        bytes18?: undefined;
        bytes19?: undefined;
        bytes20?: undefined;
        bytes21?: undefined;
        bytes22?: undefined;
        bytes23?: undefined;
        bytes24?: undefined;
        bytes25?: undefined;
        bytes26?: undefined;
        bytes27?: undefined;
        bytes28?: undefined;
        bytes29?: undefined;
        bytes30?: undefined;
        bytes31?: undefined;
        bytes32?: undefined;
        int16?: undefined;
        int8?: undefined;
        int24?: undefined;
        int32?: undefined;
        int40?: undefined;
        int48?: undefined;
        int56?: undefined;
        int64?: undefined;
        int72?: undefined;
        int80?: undefined;
        int88?: undefined;
        int96?: undefined;
        int104?: undefined;
        int112?: undefined;
        int120?: undefined;
        int128?: undefined;
        int136?: undefined;
        int144?: undefined;
        int152?: undefined;
        int160?: undefined;
        int168?: undefined;
        int176?: undefined;
        int184?: undefined;
        int192?: undefined;
        int200?: undefined;
        int208?: undefined;
        int216?: undefined;
        int224?: undefined;
        int232?: undefined;
        int240?: undefined;
        int248?: undefined;
        int256?: undefined;
        uint16?: undefined;
        uint8?: undefined;
        uint24?: undefined;
        uint32?: undefined;
        uint40?: undefined;
        uint48?: undefined;
        uint56?: undefined;
        uint64?: undefined;
        uint72?: undefined;
        uint80?: undefined;
        uint88?: undefined;
        uint96?: undefined;
        uint104?: undefined;
        uint112?: undefined;
        uint120?: undefined;
        uint128?: undefined;
        uint136?: undefined;
        uint144?: undefined;
        uint152?: undefined;
        uint160?: undefined;
        uint168?: undefined;
        uint176?: undefined;
        uint184?: undefined;
        uint192?: undefined;
        uint200?: undefined;
        uint208?: undefined;
        uint216?: undefined;
        uint224?: undefined;
        uint232?: undefined;
        uint240?: undefined;
        uint248?: undefined;
        uint256?: undefined;
    }, TPrimaryType extends string>(args: import("viem").SignTypedDataParameters<TTypedData, TPrimaryType, ParseAccount<TAccountOrAddress>>) => Promise<`0x${string}`>;
    switchChain: (args: import("viem").SwitchChainParameters) => Promise<void>;
    watchAsset: (args: import("viem").WatchAssetParams) => Promise<boolean>;
    writeContract: <const TAbi_1 extends import("viem").Abi | readonly unknown[], TFunctionName extends string, TChainOverride_4 extends Chain | undefined>(args: import("viem").WriteContractParameters<TAbi_1, TFunctionName, ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, TChainOverride_4>) => Promise<`0x${string}`>;
    clearRecords: ({ name, resolverAddress, ...txArgs }: {
        name: string;
        resolverAddress: `0x${string}`;
        account?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["account"] | undefined;
        gasPrice?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["gasPrice"] | undefined;
        maxFeePerGas?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["maxFeePerGas"] | undefined;
        maxPriorityFeePerGas?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["maxPriorityFeePerGas"] | undefined;
        gas?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["gas"] | undefined;
        nonce?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["nonce"] | undefined;
    }) => Promise<`0x${string}`>;
    commitName: ({ name, owner, duration, secret, resolverAddress, records, reverseRecord, fuses, ...txArgs }: {
        name: string;
        owner: `0x${string}`;
        duration: number;
        secret: `0x${string}`;
        resolverAddress?: `0x${string}` | undefined;
        records?: {
            clearRecords?: boolean | undefined;
            contentHash?: string | null | undefined;
            texts?: Omit<import("../utils/index.js").EncodeSetTextParameters, "namehash">[] | undefined;
            coins?: Omit<import("../utils/index.js").EncodeSetAddrParameters, "namehash">[] | undefined;
            abi?: import("../utils/index.js").EncodedAbi | import("../utils/index.js").EncodedAbi[] | undefined;
        } | undefined;
        reverseRecord?: boolean | undefined;
        fuses?: import("../utils/fuses.js").EncodeChildFusesInputObject | undefined;
        account?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["account"] | undefined;
        gasPrice?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["gasPrice"] | undefined;
        maxFeePerGas?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["maxFeePerGas"] | undefined;
        maxPriorityFeePerGas?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["maxPriorityFeePerGas"] | undefined;
        gas?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["gas"] | undefined;
        nonce?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["nonce"] | undefined;
    }) => Promise<`0x${string}`>;
    createSubname: ({ name, contract, owner, resolverAddress, expiry, fuses, ...txArgs }: import("../wallet.js").CreateSubnameParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>) => Promise<`0x${string}`>;
    deleteSubname: ({ name, contract, asOwner, ...txArgs }: {
        name: string;
        contract: "nameWrapper" | "registry";
        asOwner?: boolean | undefined;
        account?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["account"] | undefined;
        gasPrice?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["gasPrice"] | undefined;
        maxFeePerGas?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["maxFeePerGas"] | undefined;
        maxPriorityFeePerGas?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["maxPriorityFeePerGas"] | undefined;
        gas?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["gas"] | undefined;
        nonce?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["nonce"] | undefined;
    }) => Promise<`0x${string}`>;
    registerName: ({ name, owner, duration, secret, resolverAddress, records, reverseRecord, fuses, value, ...txArgs }: {
        name: string;
        owner: `0x${string}`;
        duration: number;
        secret: `0x${string}`;
        resolverAddress?: `0x${string}` | undefined;
        records?: {
            clearRecords?: boolean | undefined;
            contentHash?: string | null | undefined;
            texts?: Omit<import("../utils/index.js").EncodeSetTextParameters, "namehash">[] | undefined;
            coins?: Omit<import("../utils/index.js").EncodeSetAddrParameters, "namehash">[] | undefined;
            abi?: import("../utils/index.js").EncodedAbi | import("../utils/index.js").EncodedAbi[] | undefined;
        } | undefined;
        reverseRecord?: boolean | undefined;
        fuses?: import("../utils/fuses.js").EncodeChildFusesInputObject | undefined;
        value: bigint;
        account?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["account"] | undefined;
        gasPrice?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["gasPrice"] | undefined;
        maxFeePerGas?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["maxFeePerGas"] | undefined;
        maxPriorityFeePerGas?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["maxPriorityFeePerGas"] | undefined;
        gas?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["gas"] | undefined;
        nonce?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["nonce"] | undefined;
    }) => Promise<`0x${string}`>;
    renewNames: ({ nameOrNames, duration, value, ...txArgs }: {
        nameOrNames: string | string[];
        duration: number | bigint;
        value: bigint;
        account?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["account"] | undefined;
        gasPrice?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["gasPrice"] | undefined;
        maxFeePerGas?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["maxFeePerGas"] | undefined;
        maxPriorityFeePerGas?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["maxPriorityFeePerGas"] | undefined;
        gas?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["gas"] | undefined;
        nonce?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["nonce"] | undefined;
    }) => Promise<`0x${string}`>;
    setAbiRecord: ({ name, encodedAbi, resolverAddress, ...txArgs }: {
        name: string;
        encodedAbi: import("../utils/index.js").EncodedAbi;
        resolverAddress: `0x${string}`;
        account?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["account"] | undefined;
        gasPrice?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["gasPrice"] | undefined;
        maxFeePerGas?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["maxFeePerGas"] | undefined;
        maxPriorityFeePerGas?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["maxPriorityFeePerGas"] | undefined;
        gas?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["gas"] | undefined;
        nonce?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["nonce"] | undefined;
    }) => Promise<`0x${string}`>;
    setAddressRecord: ({ name, coin, value, resolverAddress, ...txArgs }: {
        name: string;
        coin: string | number;
        value: string | null;
        resolverAddress: `0x${string}`;
        account?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["account"] | undefined;
        gasPrice?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["gasPrice"] | undefined;
        maxFeePerGas?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["maxFeePerGas"] | undefined;
        maxPriorityFeePerGas?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["maxPriorityFeePerGas"] | undefined;
        gas?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["gas"] | undefined;
        nonce?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["nonce"] | undefined;
    }) => Promise<`0x${string}`>;
    setChildFuses: ({ name, fuses, expiry, ...txArgs }: {
        name: string;
        fuses: import("../utils/fuses.js").EncodeFusesInputObject;
        expiry?: number | bigint | undefined;
        account?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["account"] | undefined;
        gasPrice?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["gasPrice"] | undefined;
        maxFeePerGas?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["maxFeePerGas"] | undefined;
        maxPriorityFeePerGas?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["maxPriorityFeePerGas"] | undefined;
        gas?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["gas"] | undefined;
        nonce?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["nonce"] | undefined;
    }) => Promise<`0x${string}`>;
    setContentHashRecord: ({ name, contentHash, resolverAddress, ...txArgs }: {
        name: string;
        contentHash: string | null;
        resolverAddress: `0x${string}`;
        account?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["account"] | undefined;
        gasPrice?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["gasPrice"] | undefined;
        maxFeePerGas?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["maxFeePerGas"] | undefined;
        maxPriorityFeePerGas?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["maxPriorityFeePerGas"] | undefined;
        gas?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["gas"] | undefined;
        nonce?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["nonce"] | undefined;
    }) => Promise<`0x${string}`>;
    setFuses: ({ name, fuses, ...txArgs }: {
        name: string;
        fuses: import("../utils/fuses.js").EncodeChildFusesInputObject;
        account?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["account"] | undefined;
        gasPrice?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["gasPrice"] | undefined;
        maxFeePerGas?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["maxFeePerGas"] | undefined;
        maxPriorityFeePerGas?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["maxPriorityFeePerGas"] | undefined;
        gas?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["gas"] | undefined;
        nonce?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["nonce"] | undefined;
    }) => Promise<`0x${string}`>;
    setPrimaryName: ({ name, address, resolverAddress, ...txArgs }: import("../wallet.js").SetPrimaryNameParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>) => Promise<`0x${string}`>;
    setRecords: ({ name, resolverAddress, clearRecords, contentHash, texts, coins, abi, ...txArgs }: {
        name: string;
        resolverAddress: `0x${string}`;
        clearRecords?: boolean | undefined;
        contentHash?: string | null | undefined;
        texts?: Omit<import("../utils/index.js").EncodeSetTextParameters, "namehash">[] | undefined;
        coins?: Omit<import("../utils/index.js").EncodeSetAddrParameters, "namehash">[] | undefined;
        abi?: import("../utils/index.js").EncodedAbi | import("../utils/index.js").EncodedAbi[] | undefined;
        account?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["account"] | undefined;
        gasPrice?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["gasPrice"] | undefined;
        maxFeePerGas?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["maxFeePerGas"] | undefined;
        maxPriorityFeePerGas?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["maxPriorityFeePerGas"] | undefined;
        gas?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["gas"] | undefined;
        nonce?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["nonce"] | undefined;
    }) => Promise<`0x${string}`>;
    setResolver: ({ name, contract, resolverAddress, ...txArgs }: {
        name: string;
        contract: "nameWrapper" | "registry";
        resolverAddress: `0x${string}`;
        account?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["account"] | undefined;
        gasPrice?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["gasPrice"] | undefined;
        maxFeePerGas?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["maxFeePerGas"] | undefined;
        maxPriorityFeePerGas?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["maxPriorityFeePerGas"] | undefined;
        gas?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["gas"] | undefined;
        nonce?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["nonce"] | undefined;
    }) => Promise<`0x${string}`>;
    setTextRecord: ({ name, key, value, resolverAddress, ...txArgs }: {
        name: string;
        key: string;
        value: string | null;
        resolverAddress: `0x${string}`;
        account?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["account"] | undefined;
        gasPrice?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["gasPrice"] | undefined;
        maxFeePerGas?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["maxFeePerGas"] | undefined;
        maxPriorityFeePerGas?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["maxPriorityFeePerGas"] | undefined;
        gas?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["gas"] | undefined;
        nonce?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["nonce"] | undefined;
    }) => Promise<`0x${string}`>;
    transferName: ({ name, newOwnerAddress, contract, reclaim, asParent, ...txArgs }: import("../wallet.js").TransferNameParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>) => Promise<`0x${string}`>;
    unwrapName: <TName extends string>({ name, newOwnerAddress, newRegistrantAddress, ...txArgs }: import("../wallet.js").UnwrapNameParameters<TName, ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>) => Promise<`0x${string}`>;
    wrapName: <TName_1 extends string>({ name, newOwnerAddress, fuses, resolverAddress, ...txArgs }: {
        name: TName_1;
        newOwnerAddress: `0x${string}`;
        fuses?: (import("../types.js").GetNameType<TName_1> extends infer T ? T extends import("../types.js").GetNameType<TName_1> ? T extends "eth-2ld" ? import("../utils/fuses.js").EncodeChildFusesInputObject : never : never : never) | undefined;
        resolverAddress?: `0x${string}` | undefined;
        account?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["account"] | undefined;
        gasPrice?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["gasPrice"] | undefined;
        maxFeePerGas?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["maxFeePerGas"] | undefined;
        maxPriorityFeePerGas?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["maxPriorityFeePerGas"] | undefined;
        gas?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["gas"] | undefined;
        nonce?: import("viem").SendTransactionParameters<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, ChainWithEns<TChain>>["nonce"] | undefined;
    }) => Promise<`0x${string}`>;
    extend: <const client extends {
        [x: string]: unknown;
        account?: undefined;
        batch?: undefined;
        cacheTime?: undefined;
        chain?: undefined;
        key?: undefined;
        name?: undefined;
        pollingInterval?: undefined;
        request?: undefined;
        transport?: undefined;
        type?: undefined;
        uid?: undefined;
    }>(fn: (client: Client<TTransport, ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, WalletRpcSchema, WalletActions<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>> & EnsWalletActions<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>>>) => client) => Client<TTransport, ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>, WalletRpcSchema, { [K in keyof client]: client[K]; } & WalletActions<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>> & EnsWalletActions<ChainWithEns<TChain>, ParseAccount<TAccountOrAddress>>>;
};
//# sourceMappingURL=wallet.d.ts.map